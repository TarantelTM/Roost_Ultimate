plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    //id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
    id 'org.spongepowered.mixin' version '0.7.+'
}



version = '1.20.1-3.0.1'
group = 'net.tarantel.chickenroost' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'roostultimate-modrinth'
jarJar.enable()
// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://parchmentmc.org/docs/getting-started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: mapping_channel, version: mapping_version

    // When true, this property will have all Eclipse/IntelliJ IDEA run configurations run the "prepareX" task for the given run configuration before launching the game.
    // In most cases, it is not necessary to enable.
    // enableEclipsePrepareRuns = true
    // enableIdeaPrepareRuns = true

    // This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
    // It is REQUIRED to be set to true for this template to function.
    // See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
    copyIdeResources = true

    // When true, this property will add the folder name of all declared run configurations to generated IDE run configurations.
    // The folder name can be set on a run configuration using the "folderName" property.
    // By default, the folder name of a run configuration is the name of the Gradle project containing it.
    // generateRunFolders = true

    // This property enables access transformers for use in development.
    // They will be applied to the Minecraft artifact.
    // The access transformer file can be anywhere in the project.
    // However, it must be at "META-INF/accesstransformer.cfg" in the final mod jar to be loaded by Forge.
    // This default location is a best practice to automatically put the file in the right place in the final jar.
    // See https://docs.minecraftforge.net/en/latest/advanced/accesstransformers/ for more information.
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
            args("--username", "Nano")
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
    }

    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    maven {
        name 'Jitpack'
        url 'https://jitpack.io'
    }
    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
        content {
            includeGroupByRegex("software\\.bernie.*")
            includeGroup("com.eliotlash.mclib")
        }
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    mavenCentral()
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.20.1-47.3.11'
    compileOnly(fg.deobf("mezz.jei:jei-1.20.1-common-api:15.2.0.27"))
    compileOnly(fg.deobf("mezz.jei:jei-1.20.1-forge-api:15.2.0.27"))
    //implementation fg.deobf("curse.maven:applied-energistics-2-223794:4630732")
    runtimeOnly fg.deobf("curse.maven:crafttweaker-239197:4675705")
    //implementation fg.deobf("curse.maven:ender-io-64578:5171872")
    compileOnly fg.deobf("curse.maven:jei-238222:4712868")
    implementation fg.deobf("curse.maven:geckolib-388172:4933987")
    //runtimeOnly fg.deobf("curse.maven:immersive-engineering-231951:4782978")
    implementation fg.deobf("curse.maven:jade-324717:4801177")
    /*runtimeOnly fg.deobf("curse.maven:bookshelf-228525:4808092")
    runtimeOnly fg.deobf("curse.maven:botany-pots-353928:4793076")
    runtimeOnly fg.deobf("curse.maven:biomes-o-plenty-220318:4764804")
    runtimeOnly fg.deobf("curse.maven:terrablender-563928:4647094")
    runtimeOnly fg.deobf("curse.maven:thermal_extra-573674:4976228")
    runtimeOnly fg.deobf("curse.maven:thermal-locomotion-406959:4970706")
    runtimeOnly fg.deobf("curse.maven:thermal-integration-626708:4970705")
    runtimeOnly fg.deobf("curse.maven:thermal-innovation-291737:4970704")
    runtimeOnly fg.deobf("curse.maven:thermal-foundation-222880:4976806")
    runtimeOnly fg.deobf("curse.maven:thermal-expansion-69163:4970700")
    runtimeOnly fg.deobf("curse.maven:thermal-dynamics-227443:4970699")
    runtimeOnly fg.deobf("curse.maven:thermal-cultivation-271835:4970697")
    runtimeOnly fg.deobf("curse.maven:cofh-core-69162:4970669")*/
    runtimeOnly fg.deobf("curse.maven:applied-energistics-2-223794:4857895")
    /*runtimeOnly fg.deobf("curse.maven:cooking-for-blockheads-231484:4749420")
    runtimeOnly fg.deobf("curse.maven:pipez-443900:4971152")
    runtimeOnly fg.deobf("curse.maven:balm-531761:4943500")
    runtimeOnly fg.deobf("curse.maven:ato-405593:4844097")
    runtimeOnly fg.deobf("curse.maven:allthemodium-364466:4892369")
    runtimeOnly fg.deobf("curse.maven:botania-225643:4900327")
    runtimeOnly fg.deobf("curse.maven:curios-309927:4960408")
    runtimeOnly fg.deobf("curse.maven:patchouli-306770:4966125")*/
    //implementation fg.deobf("curse.maven:emi-580555:6075448")
    //compileOnly fg.deobf("dev.emi:emi-forge:1.1.19+1.20.1:api")
    compileOnly fg.deobf("dev.emi:emi-forge:1.1.19+1.20.1")
    /*runtimeOnly fg.deobf("curse.maven:silents-gems-220311:4606142")
    runtimeOnly fg.deobf("curse.maven:create-328085:4835191")
    runtimeOnly fg.deobf("curse.maven:biggerreactors-407780:4883087")
    runtimeOnly fg.deobf("curse.maven:refined-storage-243076:4844585")*/
    runtimeOnly fg.deobf("curse.maven:mekanism-268560:4866575")
    /*runtimeOnly fg.deobf("curse.maven:quartz-552262:4633734")
    runtimeOnly fg.deobf("curse.maven:silent-lib-242998:4585754")
    runtimeOnly fg.deobf("curse.maven:phosphophyllite-412551:4633720")*/
    implementation fg.deobf("curse.maven:bucketlib-560156:6110874")
    implementation fg.deobf("curse.maven:roughly-enough-items-310111:5846923")
    implementation fg.deobf("curse.maven:architectury-api-419699:5137938")
    implementation fg.deobf("curse.maven:cloth-config-348521:5729105")
    implementation fg.deobf("curse.maven:cupboard-326652:5470032")
    implementation fg.deobf("curse.maven:connectivity-470193:6164797")
    //implementation(jarJar("curse.maven:bucketlib-560156:6110874"))
    //implementation(jarJar("curse.maven:geckolib-388172:4933987"))

    //jarJar(group: 'curse.maven', name: 'bucketlib-560156:6110874')
    //jarJar(group: 'curse.maven', name: 'geckolib-388172:4933987')

    /*implementation(jarJar("com.github.cech12:BucketLib:1.20.1-2.3.5.2")) {
        jarJar.ranged(it, "[1.20.1-2.3.5.2,)")
    }
    implementation(jarJar("software.bernie.geckolib:geckolib-forge-1.20.1:4.7")) {
        jarJar.ranged(it, "[4.7,)")
    }
    implementation("com.eliotlash.mclib:mclib:20")*/

    //implementation fg.deobf("curse.maven:crafttweaker-239197:4640784")
    // Real mod deobf dependency examples - these get remapped to your current mappings
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "chicken_roost",
                "Specification-Vendor"    : "examplemodsareus",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "examplemodsareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
tasks.named('jarJar') {
    archiveClassifier = 'universal'
}